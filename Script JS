// --- Constants and Utility Functions ---
const SHEET_ID = '1uxUQGElkh7BSy73DnmU1lb0DW7kiS4otLFOVJzrSMBAE'; // Replace with your actual Google Sheet ID
const API_URL = "https://script.google.com/macros/s/AKfycbwhW3dTErflCH0OrvMnyh4Npp8fu7ZxzKzv8wGMQj2D6-cYjAPY7CdQacgy3FcBtpFE/exec"; // Example Apps Script URL
const API_TOKEN = "12345ABC"; // Example API Token

const DRIVERS_INFO = {
  'עלי': {
    id: 'ALI',
    name: 'עלי',
    slogan: 'מומחה בהובלות קטנות',
    image: 'https://i.postimg.cc/tCNbgXK3/Screenshot-20250623-200744-Tik-Tok.jpg',
    jobType: 'MANUAL', // Default job type for Ali
    color: 'manual', // Tailwind class prefix for colors (Green)
    speed: 55, // km/h
    vehicle: 'איסוזו 5T'
  },
  'חכמת': {
    id: 'HIKMAT',
    name: 'חכמת',
    slogan: 'הובלות מנוף מורכבות',
    image: 'https://i.postimg.cc/d3S0NJJZ/Screenshot-20250623-200646-Facebook.jpg',
    jobType: 'CRANE', // Default job type for Hikmat
    color: 'crane', // Tailwind class prefix for colors (Blue)
    speed: 50, // km/h
    vehicle: 'מרצדס 12T'
  }
};

const JOB_TYPES = {
    MANUAL: { label: 'פריקה ידנית', svcDefaultMin: 45 },
    CRANE: { label: 'עבודת מנוף / הובלת מנוף', svcDefaultMin: 90 },
};

const STATUSES = [
  'מתכונן ליציאה', 'בדרך', 'העמסה', 'נדחה למועד אחר', 'סופק',
  'סופק חלקית', 'מוכנה', 'בטיפול', 'בוטל',
];

const WAREHOUSES = {
    HARASH: { code: 4, label: 'מחסן החרש (4) – החרש 10, הוד השרון' },
    TALMID: { code: 1, label: 'מחסן התלמיד (1) – התלמיד 6, הוד השרון' },
};

const DEFAULT_CITIES = { // Default city distances from Hod Hasharon (km)
  'הוד השרון': 0, 'רעננה': 5, 'כפר סבא': 6, 'הרצליה': 9, 'תל אביב-יפו': 18, 'פתח תקווה': 10, 'נתניה': 25, 'מודיעין-מכבים-רעות': 35, 'חיפה': 85,
};

// Global state for cities, could be fetched from API or stored in localStorage
let appState = {
  cities: DEFAULT_CITIES,
  orders: [],
  currentDriverPage: null // null for dashboard, or driver name
};

const U = {
  uid: () => Math.random().toString(36).slice(2),
  fmtTime: (m) => {
    const hours = Math.floor(m / 60);
    const minutes = m % 60;
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
  },
  parseTimeToMinutes: (hhmm) => {
    if (!hhmm) return 0;
    const [h, m] = hhmm.split(':').map(Number);
    return h * 60 + m;
  },
  clamp: (v, min, max) => Math.min(Math.max(v, min), max),
  km: (n) => `${Number(n).toFixed(0)} ק"מ`,
  min: (n) => `${Number(n).toFixed(0)} ד׳`,
  todayStr: () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  },
  tomorrowStr: () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  },
  encode: (str) => encodeURIComponent(str || ''),
};

// --- API Communication ---
async function callApi(action, payload) {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'X-CRM-TOKEN': API_TOKEN },
      body: JSON.stringify({ action, payload })
    });
    const data = await response.json();
    if (!data.ok) {
      throw new Error(data.error || 'API error');
    }
    return data.data;
  } catch (error) {
    console.error('API call failed:', error);
    // In a real app, you'd show a user-friendly error message
    showCustomAlert('שגיאה בתקשורת עם השרת.', 'error');
    return null;
  }
}

async function fetchOrdersFromSheet() {
  showLoadingSpinner(true);
  if (!SHEET_ID || SHEET_ID === 'YOUR_GOOGLE_SHEET_ID_HERE') {
    console.warn("Please update SHEET_ID with your actual Google Sheet ID. Using sample data.");
    showLoadingSpinner(false);
    return [
      { id: U.uid(), driverName: 'עלי', date: U.todayStr(), time: '08:00', warehouse: 'HARASH', status: 'מתכונן ליציאה', customerName: 'אגם נכסים', address: 'החרש 10', city: 'הוד השרון', orderType: 'פריקה ידנית', jobType: 'MANUAL', km: 0, travelMin: 0, serviceMin: JOB_TYPES.MANUAL.svcDefaultMin, arriveHHMM: '08:00', finishHHMM: '08:45' },
      { id: U.uid(), driverName: 'חכמת', date: U.todayStr(), time: '10:00', warehouse: 'TALMID', status: 'בדרך', customerName: 'שני אילתי', address: 'מודיעין', city: 'מודיעין-מכבים-רעות', orderType: 'הובלת מנוף', jobType: 'CRANE', km: 35, travelMin: (35/DRIVERS_INFO['חכמת'].speed)*60, serviceMin: JOB_TYPES.CRANE.svcDefaultMin, arriveHHMM: '10:42', finishHHMM: '12:12' },
      { id: U.uid(), driverName: 'עלי', date: U.todayStr(), time: '12:00', warehouse: 'HARASH', status: 'סופק', customerName: 'תמר וולדורף', address: 'ויצמן 1', city: 'הוד השרון', orderType: 'פריקה ידנית', jobType: 'MANUAL', km: 0, travelMin: 0, serviceMin: JOB_TYPES.MANUAL.svcDefaultMin, arriveHHMM: '12:00', finishHHMM: '12:45' },
      { id: U.uid(), driverName: 'חכמת', date: U.tomorrowStr(), time: '07:00', warehouse: 'HARASH', status: 'מתכונן ליציאה', customerName: 'מידן לירן', address: 'הוד השרון', city: 'הוד השרון', orderType: 'עבודת מנוף', jobType: 'CRANE', km: 0, travelMin: 0, serviceMin: JOB_TYPES.CRANE.svcDefaultMin, arriveHHMM: '07:00', finishHHMM: '08:30' },
    ];
  }

  const sheetUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:json`;
  try {
    const response = await fetch(sheetUrl);
    const text = await response.text();
    const json = JSON.parse(text.substring(47, text.length - 2));
    const rows = json.table.rows.map(row => row.c.map(cell => cell ? cell.v : ''));

    const headers = rows[0];
    const data = rows.slice(1).map(row => {
      const order = {};
      headers.forEach((header, index) => {
        let key = '';
        switch(header) {
          case 'שם נהג': key = 'driverName'; break;
          case 'תאריך': key = 'date'; break;
          case 'שעה': key = 'time'; break;
          case 'מחסן': key = 'warehouse'; break;
          case 'סטטוס': key = 'status'; break;
          case 'שם לקוח': key = 'customerName'; break;
          case 'כתובת אספקה': key = 'address'; break;
          case 'עיר': key = 'city'; break;
          case 'סוג פעולה': key = 'orderType'; break;
          case 'סוג עבודה': key = 'jobType'; break;
          default: key = header.toLowerCase().replace(/\s/g, '');
        }
        order[key] = row[index];
      });

      if (!order.jobType) {
        order.jobType = order.orderType && order.orderType.includes('מנוף') ? 'CRANE' : 'MANUAL';
      }

      const driver = DRIVERS_INFO[order.driverName]?.id;
      if (driver && order.city && order.time && order.jobType) {
        const etaData = calcETA({
          driver,
          jobType: order.jobType,
          city: order.city,
          startHHMM: order.time
        });
        Object.assign(order, etaData);
      } else {
        order.km = order.km || 0;
        order.travelMin = order.travelMin || 0;
        order.serviceMin = order.serviceMin || (order.jobType === 'CRANE' ? JOB_TYPES.CRANE.svcDefaultMin : JOB_TYPES.MANUAL.svcDefaultMin);
        order.arriveHHMM = order.arriveHHMM || order.time;
        order.finishHHMM = order.finishHHMM || U.fmtTime(U.parseTimeToMinutes(order.time) + order.serviceMin);
      }

      order.id = U.uid();
      return order;
    });
    return data;
  } catch (error) {
    console.error('Failed to fetch data from Google Sheets:', error);
    showCustomAlert('שגיאה בטעינת הנתונים מהגיליון. אנא ודא שה-ID נכון.', 'error');
    return [];
  } finally {
    showLoadingSpinner(false);
  }
}

function calcETA({ driver, jobType, city, startHHMM }) {
  const km = appState.cities[city] ?? 0;
  const spd = DRIVERS_INFO[driver === 'ALI' ? 'עלי' : 'חכמת'].speed;
  const travelMin = (km / spd) * 60;
  const serviceMin = JOB_TYPES[jobType].svcDefaultMin;
  const startMin = U.parseTimeToMinutes(startHHMM || '09:00');
  const arriveHHMM = U.fmtTime(startMin + travelMin);
  const finishHHMM = U.fmtTime(startMin + travelMin + serviceMin);
  return { km, travelMin: Math.round(travelMin), serviceMin, arriveHHMM, finishHHMM };
}

// --- UI Elements and Helper Functions ---
const getStatusColorClass = (status) => {
  switch (status) {
    case 'מתכונן ליציאה': return 'bg-blue-600 text-white';
    case 'בדרך': return 'bg-yellow-600 text-white';
    case 'סופק': return 'bg-green-600 text-white';
    case 'נדחה למועד אחר': return 'bg-red-600 text-white';
    case 'מוכנה': return 'bg-purple-600 text-white';
    case 'בטיפול': return 'bg-gray-600 text-white';
    case 'בוטל': return 'bg-red-600 text-white';
    case 'העמסה': return 'bg-indigo-600 text-white';
    case 'סופק חלקית': return 'bg-orange-600 text-white';
    default: return 'bg-gray-600 text-white';
  }
};

function showLoadingSpinner(show) {
  document.getElementById('loading-spinner').classList.toggle('hidden', !show);
}

function showCustomAlert(message, type = 'info') {
  const alertModal = document.getElementById('customAlert');
  const alertMessage = document.getElementById('alertMessage');
  const alertButton = document.getElementById('closeAlertButton');

  // Reset classes
  alertModal.querySelector('div').className = 'p-6 rounded-lg shadow-lg flex flex-col items-center max-w-sm text-center border';

  let bgColor, borderColor;
  switch (type) {
    case 'success': bgColor = 'bg-green-600'; borderColor = 'border-green-400'; break;
    case 'error': bgColor = 'bg-red-600'; borderColor = 'border-red-400'; break;
    case 'warning': bgColor = 'bg-yellow-600'; borderColor = 'border-yellow-400'; break;
    default: bgColor = 'bg-blue-600'; borderColor = 'border-blue-400'; break;
  }

  alertModal.querySelector('div').classList.add(bgColor, 'text-white', borderColor);
  alertMessage.textContent = message;
  alertModal.classList.remove('hidden');

  alertButton.onclick = () => {
    alertModal.classList.add('hidden');
  };
}

function showOrderModal(order = null) {
  const modal = document.getElementById('orderModal');
  const form = document.getElementById('orderForm');
  const orderIdField = document.getElementById('orderId');
  const modalTitle = document.getElementById('orderModalTitle');

  // Populate status options dynamically
  const statusSelect = document.getElementById('status');
  statusSelect.innerHTML = STATUSES.map(s => `<option value="${s}">${s}</option>`).join('');

  if (order) {
    modalTitle.textContent = 'ערוך הזמנה קיימת';
    orderIdField.value = order.id;
    document.getElementById('driverName').value = order.driverName;
    document.getElementById('customerName').value = order.customerName;
    document.getElementById('city').value = order.city;
    document.getElementById('address').value = order.address;
    document.getElementById('orderType').value = order.orderType;
    statusSelect.value = order.status;
    document.getElementById('date').value = order.date;
    document.getElementById('time').value = order.time;
  } else {
    modalTitle.textContent = 'הוסף הזמנה חדשה';
    form.reset();
    orderIdField.value = '';
    // Set default values for new order
    document.getElementById('driverName').value = 'עלי';
    document.getElementById('date').value = U.todayStr();
    document.getElementById('time').value = '09:00';
    statusSelect.value = 'מוכנה'; // Default status for new order
  }
  modal.classList.remove('hidden');
}

function hideOrderModal() {
  document.getElementById('orderModal').classList.add('hidden');
  document.getElementById('orderForm').reset();
}

// --- Data Management ---
function addOrder(newOrder) {
  appState.orders.push(newOrder);
  renderAll();
  showCustomAlert('הזמנה נוספה בהצלחה!', 'success');
  // callApi('addOrder', newOrder); // Uncomment to enable API calls
}

function updateOrder(updatedOrder) {
  const index = appState.orders.findIndex(o => o.id === updatedOrder.id);
  if (index !== -1) {
    appState.orders[index] = updatedOrder;
    renderAll();
    showCustomAlert('הזמנה עודכנה בהצלחה!', 'success');
    // callApi('updateOrder', updatedOrder); // Uncomment to enable API calls
  }
}

function deleteOrder(orderId) {
  // Use a confirmation alert instead of direct deletion
  showCustomAlert('האם אתה בטוח שברצונך למחוק הזמנה זו?', 'warning'); // Display warning
  document.getElementById('closeAlertButton').onclick = () => {
    document.getElementById('customAlert').classList.add('hidden'); // Hide alert first
    const initialLength = appState.orders.length;
    appState.orders = appState.orders.filter(o => o.id !== orderId);
    if (appState.orders.length < initialLength) {
      renderAll();
      showCustomAlert('הזמנה נמחקה בהצלחה!', 'success');
      // callApi('deleteOrder', { id: orderId }); // Uncomment to enable API calls
    } else {
      showCustomAlert('שגיאה: הזמנה לא נמצאה.', 'error');
    }
  };
}


// --- Rendering Functions ---
function renderDashboardStats() {
  const totalOrders = appState.orders.length;
  const aliOrders = appState.orders.filter(item => item.driverName === DRIVERS_INFO['עלי'].name).length;
  const hikmatOrders = appState.orders.filter(item => item.driverName === DRIVERS_INFO['חכמת'].name).length;

  document.getElementById('totalOrders').textContent = totalOrders;
  document.getElementById('aliOrders').textContent = aliOrders;
  document.getElementById('hakmatOrders').textContent = hikmatOrders;
}

function renderTable(ordersToRender, tableBodyId, isDriverPage = false) {
  const tableBody = document.getElementById(tableBodyId);
  tableBody.innerHTML = ''; // Clear existing rows

  if (!ordersToRender || ordersToRender.length === 0) {
    tableBody.innerHTML = `<tr><td colspan="${isDriverPage ? 8 : 9}" class="p-3 text-center text-white/70">אין הזמנות להצגה</td></tr>`;
    return;
  }

  ordersToRender.forEach(order => {
    const row = document.createElement('tr');
    row.className = 'bg-dark-card-bg even:bg-dark-card-bg/70 hover:bg-white/10 transition-colors border-b border-dark-border last:border-b-0';
    
    let cellsHtml = '';
    if (!isDriverPage) {
      cellsHtml += `<td class="p-3 whitespace-nowrap text-base font-medium text-white">${order.driverName}</td>`;
    }
    cellsHtml += `
      <td class="p-3 whitespace-nowrap text-base text-white/90">${order.date}</td>
      <td class="p-3 whitespace-nowrap text-base text-white/90">${order.time}</td>
      <td class="p-3 whitespace-nowrap text-base text-white/90">${WAREHOUSES[order.warehouse]?.label || order.warehouse}</td>
      <td class="p-3 whitespace-nowrap text-base">
        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColorClass(order.status)}">
          ${order.status}
        </span>
      </td>
      <td class="p-3 whitespace-nowrap text-base text-white/90">${order.customerName}</td>
      <td class="p-3 whitespace-nowrap text-base text-white/90">${order.address}</td>
      <td class="p-3 whitespace-nowrap text-base text-white/90">${order.orderType}</td>
    `;
    
    // Actions column
    const actionsHtml = `
      <td class="p-3 whitespace-nowrap text-left text-base font-medium">
        <button onclick="handleEditOrder('${order.id}')" class="text-indigo-400 hover:text-indigo-200 ml-3 transition-colors text-sm">ערוך</button>
        <button onclick="deleteOrder('${order.id}')" class="text-red-400 hover:text-red-200 transition-colors text-sm">מחק</button>
      </td>
    `;
    cellsHtml += actionsHtml;

    row.innerHTML = cellsHtml;
    tableBody.appendChild(row);
  });
}

const DAY_START_MIN = 6 * 60; // 06:00
const DAY_END_MIN = 16 * 60; // 16:00
const DAY_TOTAL_MIN = DAY_END_MIN - DAY_START_MIN;

function renderTimeline() {
  const timelineHeader = document.getElementById('timeline-header');
  const aliTimelineTicks = document.getElementById('ali-timeline-ticks');
  const hikmatTimelineTicks = document.getElementById('hikmat-timeline-ticks');
  const laneAli = document.getElementById('laneAli');
  const laneHikmat = document.getElementById('laneHikmat');

  // Clear existing
  timelineHeader.innerHTML = '<div class=""></div>';
  aliTimelineTicks.innerHTML = '';
  hikmatTimelineTicks.innerHTML = '';
  laneAli.innerHTML = '';
  laneHikmat.innerHTML = '';

  // Render time header and ticks
  for (let i = 0; i <= (DAY_END_MIN - DAY_START_MIN) / 30; i++) {
    const time = DAY_START_MIN + i * 30;
    timelineHeader.innerHTML += `
      <div class="relative text-center">
        <div class="tick absolute inset-0"></div>
        <div class="relative z-10">${U.fmtTime(time)}</div>
      </div>
    `;
    aliTimelineTicks.innerHTML += `<div class="h-3 relative"><div class="tick absolute inset-0"></div></div>`;
    hikmatTimelineTicks.innerHTML += `<div class="h-3 relative"><div class="tick absolute inset-0"></div></div>`;
  }

  const todayOrders = appState.orders.filter(o => o.date === U.todayStr());

  todayOrders.forEach(order => {
    const startMin = U.parseTimeToMinutes(order.time);
    const orderDuration = order.travelMin + order.serviceMin;
    const clampedStartMin = U.clamp(startMin, DAY_START_MIN, DAY_END_MIN - Math.max(orderDuration, 15));
    const leftPct = ((clampedStartMin - DAY_START_MIN) / DAY_TOTAL_MIN) * 100;
    const widthPct = (Math.max(orderDuration, 15) / DAY_TOTAL_MIN) * 100;

    const driverInfo = DRIVERS_INFO[order.driverName];
    const bgColor = `bg-${driverInfo.color}/80`;
    const laneElement = order.driverName === DRIVERS_INFO['עלי'].name ? laneAli : laneHikmat;

    const orderBlock = document.createElement('div');
    orderBlock.id = `order-block-${order.id}`;
    orderBlock.className = `order-block ${bgColor} border border-dark-border shadow hover:shadow-neon`;
    orderBlock.style.left = `${leftPct}%`;
    orderBlock.style.width = `${widthPct}%`;
    orderBlock.dataset.orderId = order.id;
    orderBlock.dataset.driverId = driverInfo.id; // Store driver ID for drag/resize

    orderBlock.innerHTML = `
      <div class='p-2 text-sm leading-5'>
        <div class='font-semibold text-white'>${order.customerName} · ${order.city}</div>
        <div class='text-white/90'>${order.time} → ETA ${order.arriveHHMM} · סיום ${order.finishHHMM}</div>
        <div class='text-white/80'>${order.status || 'מתוכנן'}</div>
      </div>
      <div class="resizer absolute top-0 bottom-0 w-3 cursor-ew-resize bg-white/20 right-0 rounded-r-xl hover:bg-white/30 transition-colors"></div>
    `;

    laneElement.appendChild(orderBlock);

    // Add drag and resize listeners
    addTimelineEventListeners(orderBlock, order.id, driverInfo.id);
  });
}

let isDragging = false;
let isResizing = false;
let activeOrderBlock = null;
let startX = 0;
let initialLeft = 0;
let initialWidth = 0;
let laneWidth = 0;
let activeOrderId = null;
let activeDriverId = null;

function addTimelineEventListeners(orderBlock, orderId, driverId) {
  const resizer = orderBlock.querySelector('.resizer');

  const startDrag = (e) => {
    if (isResizing) return;
    isDragging = true;
    activeOrderBlock = orderBlock;
    activeOrderId = orderId;
    activeDriverId = driverId;
    startX = (e.touches ? e.touches[0].clientX : e.clientX);
    initialLeft = activeOrderBlock.offsetLeft;
    laneWidth = (driverId === 'ALI' ? document.getElementById('laneAli') : document.getElementById('laneHikmat')).clientWidth;
    activeOrderBlock.classList.add('dragging');
    window.addEventListener('mousemove', onDragMove, { passive: false });
    window.addEventListener('touchmove', onDragMove, { passive: false });
    window.addEventListener('mouseup', onDragEnd);
    window.addEventListener('touchend', onDragEnd);
    e.preventDefault(); // Prevent text selection etc.
  };

  const onDragMove = (e) => {
    if (!isDragging) return;
    const currentX = (e.touches ? e.touches[0].clientX : e.clientX);
    const deltaX = currentX - startX;
    let newLeft = initialLeft + deltaX;
    
    const orderWidth = activeOrderBlock.offsetWidth;
    newLeft = U.clamp(newLeft, 0, laneWidth - orderWidth);
    activeOrderBlock.style.left = `${newLeft}px`;
    e.preventDefault(); // Prevent scrolling on touch devices
  };

  const onDragEnd = () => {
    if (!isDragging) return;
    isDragging = false;
    activeOrderBlock.classList.remove('dragging');
    window.removeEventListener('mousemove', onDragMove);
    window.removeEventListener('touchmove', onDragMove);
    window.removeEventListener('mouseup', onDragEnd);
    window.removeEventListener('touchend', onDragEnd);

    // Calculate new time
    const finalLeft = activeOrderBlock.offsetLeft;
    const leftPct = finalLeft / laneWidth;
    const snappedMin = Math.round(((leftPct * DAY_TOTAL_MIN) + DAY_START_MIN) / 15) * 15;
    const newTime = U.fmtTime(snappedMin);
    
    updateOrderFromTimeline(activeOrderId, { time: newTime });
  };

  const startResize = (e) => {
    if (isDragging) return;
    isResizing = true;
    activeOrderBlock = orderBlock;
    activeOrderId = orderId;
    activeDriverId = driverId;
    startX = (e.touches ? e.touches[0].clientX : e.clientX);
    initialWidth = activeOrderBlock.offsetWidth;
    initialLeft = activeOrderBlock.offsetLeft;
    laneWidth = (driverId === 'ALI' ? document.getElementById('laneAli') : document.getElementById('laneHikmat')).clientWidth;
    activeOrderBlock.classList.add('resizing');
    window.addEventListener('mousemove', onResizeMove, { passive: false });
    window.addEventListener('touchmove', onResizeMove, { passive: false });
    window.addEventListener('mouseup', onResizeEnd);
    window.addEventListener('touchend', onResizeEnd);
    e.stopPropagation(); // Prevent drag from starting
    e.preventDefault();
  };

  const onResizeMove = (e) => {
    if (!isResizing) return;
    const currentX = (e.touches ? e.touches[0].clientX : e.clientX);
    const deltaX = currentX - startX;
    let newWidth = initialWidth + deltaX;

    newWidth = U.clamp(newWidth, 20, laneWidth - initialLeft);
    activeOrderBlock.style.width = `${newWidth}px`;
    e.preventDefault();
  };

  const onResizeEnd = () => {
    if (!isResizing) return;
    isResizing = false;
    activeOrderBlock.classList.remove('resizing');
    window.removeEventListener('mousemove', onResizeMove);
    window.removeEventListener('touchmove', onResizeMove);
    window.removeEventListener('mouseup', onResizeEnd);
    window.removeEventListener('touchend', onResizeEnd);

    // Calculate new duration
    const finalWidth = activeOrderBlock.offsetWidth;
    const widthPct = finalWidth / laneWidth;
    const newDuration = Math.round((widthPct * DAY_TOTAL_MIN) / 15) * 15;

    const order = appState.orders.find(o => o.id === activeOrderId);
    if (order) {
      const newServiceMin = newDuration - order.travelMin;
      const updatedOrder = {
        ...order,
        serviceMin: Math.max(0, newServiceMin),
        finishHHMM: U.fmtTime(U.parseTimeToMinutes(order.arriveHHMM) + Math.max(0, newServiceMin))
      };
      updateOrderFromTimeline(activeOrderId, updatedOrder);
    }
  };

  orderBlock.addEventListener('mousedown', startDrag, { passive: false });
  orderBlock.addEventListener('touchstart', startDrag, { passive: false });
  resizer.addEventListener('mousedown', startResize, { passive: false });
  resizer.addEventListener('touchstart', startResize, { passive: false });
}

function updateOrderFromTimeline(orderId, newFields) {
  const orderToUpdate = appState.orders.find(o => o.id === orderId);
  if (orderToUpdate) {
    const updatedOrder = { ...orderToUpdate, ...newFields };
    if (newFields.time || newFields.serviceMin) {
      const driverInfo = DRIVERS_INFO[updatedOrder.driverName];
      const jobType = updatedOrder.jobType;
      const etaData = calcETA({
        driver: driverInfo.id,
        jobType: jobType,
        city: updatedOrder.city,
        startHHMM: updatedOrder.time,
      });
      Object.assign(updatedOrder, etaData);
    }
    updateOrder(updatedOrder);
    showCustomAlert(`הזמנה ${updatedOrder.customerName} עודכנה בהצלחה!`, 'success');
  }
}

// --- Page Navigation ---
function showDriverPage(driverName) {
  appState.currentDriverPage = driverName;
  document.getElementById('main-dashboard-section').classList.add('hidden');
  document.getElementById('driver-profile-section').classList.remove('hidden');

  const driver = DRIVERS_INFO[driverName];
  document.getElementById('driver-avatar').src = driver.image;
  document.getElementById('driver-name').textContent = driverName;
  document.getElementById('driver-name-in-table').textContent = driverName;
  document.getElementById('driver-slogan').textContent = driver.slogan;

  const driverOrders = appState.orders.filter(item => item.driverName === driverName);
  renderTable(driverOrders, 'driverOrdersTableBody', true);
}

function showMainDashboard() {
  appState.currentDriverPage = null;
  document.getElementById('driver-profile-section').classList.add('hidden');
  document.getElementById('main-dashboard-section').classList.remove('hidden');
  renderAll(); // Re-render dashboard content
}

// --- Main Render Function ---
function renderAll() {
  if (appState.currentDriverPage) {
    showDriverPage(appState.currentDriverPage); // Re-render specific driver page
  } else {
    renderDashboardStats();
    renderTimeline();
    
    const searchTerm = document.getElementById('searchInput').value;
    const driverFilter = document.getElementById('driverFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;

    const filteredOrders = appState.orders.filter(order => {
      const matchesSearch = Object.values(order).some(value =>
        String(value).toLowerCase().includes(searchTerm.toLowerCase())
      );
      const matchesDriver = driverFilter === '' || order.driverName === driverFilter;
      const matchesStatus = statusFilter === '' || order.status === statusFilter;
      return matchesSearch && matchesDriver && matchesStatus;
    });
    renderTable(filteredOrders, 'ordersTableBody', false);
  }
}

// --- Event Listeners and Initial Load ---
document.addEventListener('DOMContentLoaded', async () => {
  // Populate status filter options
  const statusFilterSelect = document.getElementById('statusFilter');
  statusFilterSelect.innerHTML += STATUSES.map(s => `<option value="${s}">${s}</option>`).join('');

  // Initial fetch and render
  appState.orders = await fetchOrdersFromSheet();
  renderAll();

  // Event Listeners for Dashboard Cards
  document.getElementById('aliCard').addEventListener('click', () => showDriverPage('עלי'));
  document.getElementById('hikmatCard').addEventListener('click', () => showDriverPage('חכמת'));
  document.getElementById('addOrderCard').addEventListener('click', () => showOrderModal());

  // Event Listeners for Driver Profile Page
  document.getElementById('backToDashboardBtn').addEventListener('click', showMainDashboard);

  // Event Listeners for Order Modal
  document.getElementById('cancelOrderModal').addEventListener('click', hideOrderModal);
  document.getElementById('orderForm').addEventListener('submit', (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const orderData = {};
    formData.forEach((value, key) => (orderData[key] = value));

    const driverInfo = DRIVERS_INFO[orderData.driverName];
    const jobType = orderData.orderType.includes('מנוף') ? 'CRANE' : 'MANUAL';
    const { km, travelMin, serviceMin, arriveHHMM, finishHHMM } = calcETA({
      driver: driverInfo.id,
      jobType: jobType,
      city: orderData.city,
      startHHMM: orderData.time
    });

    const finalOrderData = {
      ...orderData,
      jobType,
      km,
      travelMin,
      serviceMin,
      arriveHHMM,
      finishHHMM
    };

    if (orderData.id) {
      updateOrder(finalOrderData);
    } else {
      addOrder({ ...finalOrderData, id: U.uid() });
    }
    hideOrderModal();
  });

  // Event Listeners for Search and Filters
  document.getElementById('searchInput').addEventListener('input', renderAll);
  document.getElementById('driverFilter').addEventListener('change', renderAll);
  document.getElementById('statusFilter').addEventListener('change', renderAll);
});

// Expose handleEditOrder globally for onclick in table rows
window.handleEditOrder = (orderId) => {
  const order = appState.orders.find(o => o.id === orderId);
  if (order) {
    showOrderModal(order);
  } else {
    showCustomAlert('שגיאה: הזמנה לא נמצאה לעריכה.', 'error');
  }
};
window.deleteOrder = deleteOrder; // Expose deleteOrder globally
